version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: skale-payment-postgres
    environment:
      POSTGRES_DB: skale_payment
      POSTGRES_USER: skale_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - skale-payment-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skale_user -d skale_payment"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: skale-payment-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - skale-payment-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: skale-payment-backend
    environment:
      - DATABASE_URL=postgresql://skale_user:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/skale_payment
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=${DEBUG:-false}
      - SECRET_KEY=${SECRET_KEY:-your_secret_key_here}
      - SKALE_RPC_URL=${SKALE_RPC_URL}
      - CHAIN_ID=${CHAIN_ID}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - X402_ENCRYPTION_KEY=${X402_ENCRYPTION_KEY}
      - CORS_ORIGINS=["http://localhost:3000", "http://localhost:80", "https://${DOMAIN:-localhost}"]
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - skale-payment-network
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Web Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: skale-payment-frontend
    environment:
      - API_BASE_URL=http://backend:8000
      - CHAIN_ID=${CHAIN_ID}
      - SKALE_RPC_URL=${SKALE_RPC_URL}
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - skale-payment-network
    volumes:
      - ./frontend:/usr/share/nginx/html
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: skale-payment-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - skale-payment-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: skale-payment-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - skale-payment-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: skale-payment-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - skale-payment-network
    restart: unless-stopped

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: skale-payment-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - skale-payment-network
    restart: unless-stopped

  # Log Shipper
  promtail:
    image: grafana/promtail:latest
    container_name: skale-payment-promtail
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml
      - backend_logs:/var/log/backend
      - nginx_logs:/var/log/nginx
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - skale-payment-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  skale-payment-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

